// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Wincare.Pendaftaran.Migration.Models;

public partial class WinCare2Context : DbContext
{
    public WinCare2Context(DbContextOptions<WinCare2Context> options)
        : base(options)
    {
    }

    public virtual DbSet<TmDokter> TmDokters { get; set; }

    public virtual DbSet<TmDokterNote> TmDokterNotes { get; set; }

    public virtual DbSet<TmGudang> TmGudangs { get; set; }

    public virtual DbSet<TmJadwaldokter> TmJadwaldokters { get; set; }

    public virtual DbSet<TmKamarinap> TmKamarinaps { get; set; }

    public virtual DbSet<TmKodepo> TmKodepos { get; set; }

    public virtual DbSet<TmPasien> TmPasiens { get; set; }

    public virtual DbSet<TmRekanan> TmRekanans { get; set; }

    public virtual DbSet<TmRuang> TmRuangs { get; set; }

    public virtual DbSet<TmSettingAdm> TmSettingAdms { get; set; }

    public virtual DbSet<TmSettingDaftar> TmSettingDaftars { get; set; }

    public virtual DbSet<TmTarifGroup> TmTarifGroups { get; set; }

    public virtual DbSet<TmTarifHarga> TmTarifHargas { get; set; }

    public virtual DbSet<TmTarifMatrix> TmTarifMatrices { get; set; }

    public virtual DbSet<TmTarifRekanan> TmTarifRekanans { get; set; }

    public virtual DbSet<TmTarifRekananSub> TmTarifRekananSubs { get; set; }

    public virtual DbSet<TmTarifdetail> TmTarifdetails { get; set; }

    public virtual DbSet<TmhKamar> TmhKamars { get; set; }

    public virtual DbSet<TmhPengunjung> TmhPengunjungs { get; set; }

    public virtual DbSet<TrHasillab> TrHasillabs { get; set; }

    public virtual DbSet<TrHasilrad> TrHasilrads { get; set; }

    public virtual DbSet<TrItemnonmedi> TrItemnonmedis { get; set; }

    public virtual DbSet<TrItemobatlangsung> TrItemobatlangsungs { get; set; }

    public virtual DbSet<TrItempaket> TrItempakets { get; set; }

    public virtual DbSet<TtAcountpasien> TtAcountpasiens { get; set; }

    public virtual DbSet<TtBetinap> TtBetinaps { get; set; }

    public virtual DbSet<TtBlacklist> TtBlacklists { get; set; }

    public virtual DbSet<TtDeposit> TtDeposits { get; set; }

    public virtual DbSet<TtKuitansi> TtKuitansis { get; set; }

    public virtual DbSet<TtKuitansialke> TtKuitansialkes { get; set; }

    public virtual DbSet<TtKuitansiresep> TtKuitansireseps { get; set; }

    public virtual DbSet<TtKunjungan> TtKunjungans { get; set; }

    public virtual DbSet<TtLiburdokter> TtLiburdokters { get; set; }

    public virtual DbSet<TtNotedokter> TtNotedokters { get; set; }

    public virtual DbSet<TtObatalke> TtObatalkes { get; set; }

    public virtual DbSet<TtObatlangsung> TtObatlangsungs { get; set; }

    public virtual DbSet<TtPaidout> TtPaidouts { get; set; }

    public virtual DbSet<TtPaket> TtPakets { get; set; }

    public virtual DbSet<TtPaketPbAppDetail> TtPaketPbAppDetails { get; set; }

    public virtual DbSet<TtPasienRencanaRad> TtPasienRencanaRads { get; set; }

    public virtual DbSet<TtPasieninap> TtPasieninaps { get; set; }

    public virtual DbSet<TtPasienlab> TtPasienlabs { get; set; }

    public virtual DbSet<TtPasienpenunjang> TtPasienpenunjangs { get; set; }

    public virtual DbSet<TtPasienrad> TtPasienrads { get; set; }

    public virtual DbSet<TtPasienugd> TtPasienugds { get; set; }

    public virtual DbSet<TtPembayaran> TtPembayarans { get; set; }

    public virtual DbSet<TtPembayaranDetail> TtPembayaranDetails { get; set; }

    public virtual DbSet<TtPembayaranLock> TtPembayaranLocks { get; set; }

    public virtual DbSet<TtPemeriksaanradiologi> TtPemeriksaanradiologis { get; set; }

    public virtual DbSet<TtPenjadwalan> TtPenjadwalans { get; set; }

    public virtual DbSet<TtPlafonbpj> TtPlafonbpjs { get; set; }

    public virtual DbSet<TtPlafonbpjsHistory> TtPlafonbpjsHistories { get; set; }

    public virtual DbSet<TtResep> TtReseps { get; set; }

    public virtual DbSet<TtRetur> TtReturs { get; set; }

    public virtual DbSet<TtReturalke> TtReturalkes { get; set; }

    public virtual DbSet<TtRubahrekanan> TtRubahrekanans { get; set; }

    public virtual DbSet<TtTindakan> TtTindakans { get; set; }

    public virtual DbSet<TtTindakanDetail> TtTindakanDetails { get; set; }

    public virtual DbSet<TtTransaksi> TtTransaksis { get; set; }

    public virtual DbSet<TtTransaksinonmedi> TtTransaksinonmedis { get; set; }

    public virtual DbSet<TthDeposit> TthDeposits { get; set; }

    public virtual DbSet<TthKunjungan> TthKunjungans { get; set; }

    public virtual DbSet<TthPengunjunginap> TthPengunjunginaps { get; set; }

    public virtual DbSet<TthRubahrekananHotel> TthRubahrekananHotels { get; set; }

    public virtual DbSet<TthTransaksi> TthTransaksis { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TmDokter>(entity =>
        {
            entity.ToTable("TM_DOKTER", tb =>
                {
                    tb.HasTrigger("INSERT_TM_ASAL");
                    tb.HasTrigger("UPDATE_TM_ASAL");
                });

            entity.Property(e => e.IdDokter).ValueGeneratedOnAdd();
            entity.Property(e => e.VKodetarif).IsFixedLength();
        });

        modelBuilder.Entity<TmDokterNote>(entity =>
        {
            entity.Property(e => e.IdDokter).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmGudang>(entity =>
        {
            entity.Property(e => e.IdGudangobat).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmJadwaldokter>(entity =>
        {
            entity.HasKey(e => e.IdJadwal).HasName("PK_TR_JADWALDOKTER");

            entity.Property(e => e.IdJadwal).ValueGeneratedOnAdd();

            entity.HasOne(d => d.VKddokterNavigation).WithMany(p => p.TmJadwaldokters).HasConstraintName("FK_TM_JADWALDOKTER_TM_DOKTER_(kddokter)");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TmJadwaldokters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TM_JADWALDOKTER_TM_RUANG_(kdruangan)");
        });

        modelBuilder.Entity<TmKamarinap>(entity =>
        {
            entity.Property(e => e.CIsi).IsFixedLength();
            entity.Property(e => e.IdKamarinap).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmKodepo>(entity =>
        {
            entity.HasKey(e => e.IdKodepos).HasName("PK_TM_KODEPOS_1");

            entity.Property(e => e.IdKodepos).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmPasien>(entity =>
        {
            entity.Property(e => e.CIscetakkartu).IsFixedLength();
            entity.Property(e => e.IdNumpasien).ValueGeneratedOnAdd();

            entity.HasOne(d => d.Rekanan).WithMany(p => p.TmPasiens).HasConstraintName("FK_TM_PASIEN_TM_REKANAN_(rekananid)");
        });

        modelBuilder.Entity<TmRekanan>(entity =>
        {
            entity.Property(e => e.IdNumrekanan).ValueGeneratedOnAdd();
            entity.Property(e => e.IsCob).HasDefaultValue(false);
        });

        modelBuilder.Entity<TmRuang>(entity =>
        {
            entity.Property(e => e.IdNumruang).ValueGeneratedOnAdd();
            entity.Property(e => e.Kelompok).IsFixedLength();

            entity.HasOne(d => d.KodeRequestobatNavigation).WithMany(p => p.TmRuangKodeRequestobatNavigations).HasConstraintName("FK_TM_RUANG_TM_GUDANG2_(requestobat)");

            entity.HasOne(d => d.VKodeinventoryNavigation).WithMany(p => p.TmRuangVKodeinventoryNavigations).HasConstraintName("FK_TM_RUANG_TM_GUDANG_(kdinventory)");
        });

        modelBuilder.Entity<TmSettingAdm>(entity =>
        {
            entity.Property(e => e.IdNumadm).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmSettingDaftar>(entity =>
        {
            entity.Property(e => e.IdSettingdaftar).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifGroup>(entity =>
        {
            entity.Property(e => e.IdGrouptarif).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifHarga>(entity =>
        {
            entity.HasKey(e => e.IdTarifkelas).HasName("PK_TM_TARIF_KELAS2");

            entity.ToTable("TM_TARIF_HARGA", tb => tb.HasTrigger("UPDATE_STATUS_TM_TARIF_HARGA"));

            entity.Property(e => e.IdTarifkelas).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifMatrix>(entity =>
        {
            entity.Property(e => e.IdTarifmatrix).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifRekanan>(entity =>
        {
            entity.HasKey(e => e.IdTarifrekanan).HasName("PK_TM_TARIF_REKANAN2");

            entity.Property(e => e.IdTarifrekanan).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifRekananSub>(entity =>
        {
            entity.Property(e => e.IdTarifrekanansub).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmTarifdetail>(entity =>
        {
            entity.Property(e => e.IdTarifdetail).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdGrouptarifNavigation).WithMany(p => p.TmTarifdetails).HasConstraintName("FK_TM_TARIFDETAIL_TM_TARIF_GROUP");
        });

        modelBuilder.Entity<TmhKamar>(entity =>
        {
            entity.Property(e => e.Idkamar).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TmhPengunjung>(entity =>
        {
            entity.Property(e => e.IdNumpengunjung).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TrHasillab>(entity =>
        {
            entity.Property(e => e.IdHasillab).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdPasienlabNavigation).WithMany(p => p.TrHasillabs).HasConstraintName("FK_TR_HASILLAB_TT_PASIENLAB");
        });

        modelBuilder.Entity<TrHasilrad>(entity =>
        {
            entity.HasKey(e => e.IdTrhasilrad).HasName("PK_TR_HASILRAD_1");

            entity.Property(e => e.IdTrhasilrad).ValueGeneratedOnAdd();
            entity.Property(e => e.VRtf).IsFixedLength();

            entity.HasOne(d => d.IdPasienradNavigation).WithMany(p => p.TrHasilrads)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TR_HASILRAD_TT_PASIENRAD");
        });

        modelBuilder.Entity<TrItemnonmedi>(entity =>
        {
            entity.Property(e => e.IdItemnonmedis).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdTransaksinonmedisNavigation).WithMany(p => p.TrItemnonmedis).HasConstraintName("FK_TR_ITEMNONMEDIS_TT_TRANSAKSINONMEDIS");
        });

        modelBuilder.Entity<TrItemobatlangsung>(entity =>
        {
            entity.Property(e => e.IdItemobatlangsung).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();

            entity.HasOne(d => d.VNokuitansiNavigation).WithMany(p => p.TrItemobatlangsungs).HasConstraintName("FK_TR_ITEMOBATLANGSUNG_TT_OBATLANGSUNG");
        });

        modelBuilder.Entity<TrItempaket>(entity =>
        {
            entity.Property(e => e.IdDetailpaket).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();

            entity.HasOne(d => d.IdPaketNavigation).WithMany(p => p.TrItempakets).HasConstraintName("FK_TR_ITEMPAKET_TT_PAKET");
        });

        modelBuilder.Entity<TtAcountpasien>(entity =>
        {
            entity.Property(e => e.IdAcountpasien).ValueGeneratedOnAdd();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.Unit).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<TtBetinap>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.IdNum).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtBetinaps)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_BETINAP_TT_KUNJUNGAN");
        });

        modelBuilder.Entity<TtBlacklist>(entity =>
        {
            entity.Property(e => e.IdBlacklist).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtDeposit>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtDeposits)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_DEPOSIT_TT_KUNJUNGAN");
        });

        modelBuilder.Entity<TtKuitansi>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TT_EDITKUITANSI");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtKuitansialke>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.IdNumalkes).ValueGeneratedOnAdd();

            entity.HasOne(d => d.VKodeinventoryNavigation).WithMany(p => p.TtKuitansialkes).HasConstraintName("FK_TT_KUITANSIALKES_TM_GUDANG");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtKuitansialkes).HasConstraintName("FK_TT_KUITANSIALKES_TM_RUANG");
        });

        modelBuilder.Entity<TtKuitansiresep>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveAa).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.Idn).ValueGeneratedOnAdd();
            entity.Property(e => e.TtdDokter).HasDefaultValue("");

            entity.HasOne(d => d.VKddokterNavigation).WithMany(p => p.TtKuitansireseps).HasConstraintName("FK_TT_KUITANSIRESEP_TM_DOKTER");

            entity.HasOne(d => d.VKoderequestobatNavigation).WithMany(p => p.TtKuitansireseps).HasConstraintName("FK_TT_KUITANSIRESEP_TM_GUDANG");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtKuitansireseps).HasConstraintName("FK_TT_KUITANSIRESEP_TM_RUANG");
        });

        modelBuilder.Entity<TtKunjungan>(entity =>
        {
            entity.Property(e => e.CIsbatal).IsFixedLength();
            entity.Property(e => e.IdNumkunjungan).ValueGeneratedOnAdd();
            entity.Property(e => e.VNomorsep).HasDefaultValue("");

            entity.HasOne(d => d.IdPasienNavigation).WithMany(p => p.TtKunjungans)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_KUNJUNGAN_TM_PASIEN_(idpasien)");

            entity.HasOne(d => d.Rekanan).WithMany(p => p.TtKunjungans)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_KUNJUNGAN_TM_REKANAN_(rekananid)");
        });

        modelBuilder.Entity<TtLiburdokter>(entity =>
        {
            entity.Property(e => e.IdLiburdokter).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtNotedokter>(entity =>
        {
            entity.Property(e => e.IdNotedokter).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtObatalke>(entity =>
        {
            entity.Property(e => e.IdAlkes).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
        });

        modelBuilder.Entity<TtObatlangsung>(entity =>
        {
            entity.Property(e => e.BBayar).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.IdObatlangsung).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtPaidout>(entity =>
        {
            entity.Property(e => e.IdPaidout).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtPaidouts).HasConstraintName("FK_TT_PAIDOUT_TT_KUNJUNGAN");
        });

        modelBuilder.Entity<TtPaket>(entity =>
        {
            entity.ToTable("TT_PAKET", tb => tb.HasTrigger("UPDATE_TT_TRANSAKSI"));

            entity.Property(e => e.IdPaket).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.VKddokter).IsFixedLength();
            entity.Property(e => e.VKdpemeriksaan).IsFixedLength();
            entity.Property(e => e.VKodetarif).IsFixedLength();
            entity.Property(e => e.VNmdokter).IsFixedLength();
            entity.Property(e => e.VNmpemeriksaan).IsFixedLength();
            entity.Property(e => e.VNmunit).IsFixedLength();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtPakets).HasConstraintName("FK_TT_PAKET_TT_KUNJUNGAN");
        });

        modelBuilder.Entity<TtPaketPbAppDetail>(entity =>
        {
            entity.Property(e => e.IdPaketpbAppdetail).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtPasienRencanaRad>(entity =>
        {
            entity.Property(e => e.IdRencanakegiatan).ValueGeneratedOnAdd();
            entity.Property(e => e.CStatus).IsFixedLength();

            entity.HasOne(d => d.IdPasienNavigation).WithMany(p => p.TtPasienRencanaRads).HasConstraintName("FK_TT_PASIEN_RENCANA_RAD_TM_PASIEN");
        });

        modelBuilder.Entity<TtPasieninap>(entity =>
        {
            entity.Property(e => e.CIsdone).IsFixedLength();
            entity.Property(e => e.IdNum).ValueGeneratedOnAdd();

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtPasieninaps).HasConstraintName("FK_TT_PASIENINAP_TM_RUANG");
        });

        modelBuilder.Entity<TtPasienlab>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveAna).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.CIsdone).IsFixedLength();
            entity.Property(e => e.IdNum).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtPasienlabs)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_PASIENLAB_TT_KUNJUNGAN");

            entity.HasOne(d => d.VKddokterNavigation).WithMany(p => p.TtPasienlabVKddokterNavigations).HasConstraintName("FK_TT_PASIENLAB_TM_DOKTER3");

            entity.HasOne(d => d.VKddokterpjawabNavigation).WithMany(p => p.TtPasienlabVKddokterpjawabNavigations).HasConstraintName("FK_TT_PASIENLAB_TM_DOKTER2");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtPasienlabs).HasConstraintName("FK_TT_PASIENLAB_TM_RUANG");
        });

        modelBuilder.Entity<TtPasienpenunjang>(entity =>
        {
            entity.HasKey(e => e.IdPasienpenunjang).HasName("PK_TT_PASIENHEMO");

            entity.Property(e => e.CIsdone).IsFixedLength();
            entity.Property(e => e.IdNumpasienpenj).ValueGeneratedOnAdd();

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtPasienpenunjangs).HasConstraintName("FK_TT_PASIENPENUNJANG_TM_RUANG");
        });

        modelBuilder.Entity<TtPasienrad>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveAna).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.CIsdone).IsFixedLength();
            entity.Property(e => e.IdNum).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtPasienrads)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_PASIENRAD_TT_KUNJUNGAN");

            entity.HasOne(d => d.VKddokterNavigation).WithMany(p => p.TtPasienrads)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_PASIENRAD_TM_DOKTER");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtPasienrads).HasConstraintName("FK_TT_PASIENRAD_TM_RUANG");
        });

        modelBuilder.Entity<TtPasienugd>(entity =>
        {
            entity.Property(e => e.IdNumpasienugd).ValueGeneratedOnAdd();
            entity.Property(e => e.CIsdone).IsFixedLength();
            entity.Property(e => e.CNadi).IsFixedLength();
            entity.Property(e => e.CSuhutubuh).IsFixedLength();
            entity.Property(e => e.CTekanandarah).IsFixedLength();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtPasienugds)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TT_PASIENUGD_TT_KUNJUNGAN");

            entity.HasOne(d => d.VKddokterNavigation).WithMany(p => p.TtPasienugds).HasConstraintName("FK_TT_PASIENUGD_TM_DOKTER");

            entity.HasOne(d => d.VKoderuanganNavigation).WithMany(p => p.TtPasienugds).HasConstraintName("FK_TT_PASIENUGD_TM_RUANG");
        });

        modelBuilder.Entity<TtPembayaran>(entity =>
        {
            entity.HasKey(e => e.VNomorbyrpasien).HasName("PK_TT_PEMBAYARAN_1");

            entity.Property(e => e.Idpembayaran).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtPembayaranDetail>(entity =>
        {
            entity.HasKey(e => e.Idn).HasName("PK_TT_PEMBAYARAN");

            entity.Property(e => e.Idn).ValueGeneratedOnAdd();
            entity.Property(e => e.CStatus).IsFixedLength();
        });

        modelBuilder.Entity<TtPembayaranLock>(entity =>
        {
            entity.Property(e => e.IdLockbayar).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtPemeriksaanradiologi>(entity =>
        {
            entity.Property(e => e.IdNumpasienrad).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveAna).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
        });

        modelBuilder.Entity<TtPenjadwalan>(entity =>
        {
            entity.Property(e => e.IdPenjadwalan).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdPasienNavigation).WithMany(p => p.TtPenjadwalans).HasConstraintName("FK_TT_PENJADWALAN_TM_PASIEN");
        });

        modelBuilder.Entity<TtPlafonbpj>(entity =>
        {
            entity.Property(e => e.Idbpjs).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtPlafonbpjsHistory>(entity =>
        {
            entity.Property(e => e.Idbpjshistory).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtResep>(entity =>
        {
            entity.HasKey(e => e.IdObatresep).HasName("PK_TT_RESEPX");

            entity.Property(e => e.IdObatresep).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveAa).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
            entity.Property(e => e.DDosisracikan).IsFixedLength();
        });

        modelBuilder.Entity<TtRetur>(entity =>
        {
            entity.Property(e => e.IdReturdetail).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
        });

        modelBuilder.Entity<TtReturalke>(entity =>
        {
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApproveVer).IsFixedLength();
        });

        modelBuilder.Entity<TtRubahrekanan>(entity =>
        {
            entity.Property(e => e.IdRubahrekanan).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TtTindakan>(entity =>
        {
            entity.Property(e => e.IdTindakan).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApprove2).IsFixedLength();

            entity.HasOne(d => d.IdRegistrasiNavigation).WithMany(p => p.TtTindakans).HasConstraintName("FK_TT_TINDAKAN_TT_KUNJUNGAN");
        });

        modelBuilder.Entity<TtTindakanDetail>(entity =>
        {
            entity.HasKey(e => e.IdTindakandetail).HasName("PK_TT_TINDAKAN1");

            entity.ToTable("TT_TINDAKAN_DETAIL", tb =>
                {
                    tb.HasTrigger("INSERT_STATUS_TINDAKAN");
                    tb.HasTrigger("UPDATE_STATUS_TINDAKAN");
                });

            entity.Property(e => e.IdTindakandetail).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApprove2).IsFixedLength();
        });

        modelBuilder.Entity<TtTransaksi>(entity =>
        {
            entity.ToTable("TT_TRANSAKSI", tb =>
                {
                    tb.HasTrigger("INSERT_STATUS_TRANSAKSI");
                    tb.HasTrigger("UPDATE_STATUS_TRANSAKSI");
                });

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.CApprove).IsFixedLength();
            entity.Property(e => e.CApprove2).IsFixedLength();
            entity.Property(e => e.IsBayar).IsFixedLength();
        });

        modelBuilder.Entity<TtTransaksinonmedi>(entity =>
        {
            entity.Property(e => e.IdTransaksinonmedis).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TthDeposit>(entity =>
        {
            entity.Property(e => e.Iddeposit).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdkunjunganNavigation).WithMany(p => p.TthDeposits).HasConstraintName("FK_TTH_DEPOSIT_TTH_KUNJUNGAN");
        });

        modelBuilder.Entity<TthKunjungan>(entity =>
        {
            entity.Property(e => e.IdNum).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdpengunjungNavigation).WithMany(p => p.TthKunjungans).HasConstraintName("FK_TTH_KUNJUNGAN_TMH_PENGUNJUNG");

            entity.HasOne(d => d.KamarNavigation).WithMany(p => p.TthKunjungans).HasConstraintName("FK_TTH_KUNJUNGAN_TMH_KAMAR");

            entity.HasOne(d => d.Rekanan).WithMany(p => p.TthKunjungans).HasConstraintName("FK_TTH_KUNJUNGAN_TM_REKANAN");
        });

        modelBuilder.Entity<TthPengunjunginap>(entity =>
        {
            entity.Property(e => e.Idpengunjunginap).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdkunjunganNavigation).WithMany(p => p.TthPengunjunginaps)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TTH_PENGUNJUNGINAP_TTH_KUNJUNGAN");

            entity.HasOne(d => d.KamarNavigation).WithMany(p => p.TthPengunjunginaps).HasConstraintName("FK_TTH_PENGUNJUNGINAP_TMH_KAMAR");
        });

        modelBuilder.Entity<TthRubahrekananHotel>(entity =>
        {
            entity.HasKey(e => e.IdRubahrekananhtl).HasName("PK_TT_RUBAHREKANAN_HOTEL");

            entity.Property(e => e.IdRubahrekananhtl).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<TthTransaksi>(entity =>
        {
            entity.Property(e => e.Idtransaksi).ValueGeneratedOnAdd();

            entity.HasOne(d => d.IdkunjunganNavigation).WithMany(p => p.TthTransaksis).HasConstraintName("FK_TTH_TRANSAKSI_TTH_KUNJUNGAN");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}